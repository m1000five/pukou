DECLARE TOTAL SHARED INTEGER 0;
DECLARE FAILE SHARED INTEGER 0;

CREATE COMPUTE MODULE ExcelTest_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	    -- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage(); 
		
		-- ignored for XML domain
		--SET OutputRoot.Properties.MessageSet = 'ExcelParser';
		--SET OutputRoot.Properties.MessageType = 'workbook';
		--SET OutputRoot.Properties.MessageFormat = 'XML1';
		
		-- get the number of xls file records
		DECLARE count INTEGER;
        SET count = CARDINALITY(InputRoot.XML.workbook.sheet[1].row[]);
        SET TOTAL = count-1 ;
        
        DECLARE i INTEGER 2;
        DECLARE cellCount INTEGER 2;        
        WHILE i <= count DO 
  			--use the default tooling-generated procedure for copying message headers 
  			CALL CopyMessageHeaders(); 
  			
  			SET OutputRoot.XMLNSC.Records.rec[i-1].ID = i-1;
  			SET OutputRoot.XMLNSC.Records.rec[i-1].FileName = InputLocalEnvironment.File.Name;
  			SET OutputRoot.XMLNSC.Records.rec[i-1].ZZJGDM = InputRoot.XML.workbook.sheet[1].row[i].cell[1]; 
  			SET OutputRoot.XMLNSC.Records.rec[i-1].QYMC = InputRoot.XML.workbook.sheet[1].row[i].cell[2];
  			SET OutputRoot.XMLNSC.Records.rec[i-1].KSRQ = InputRoot.XML.workbook.sheet[1].row[i].cell[3];
  			SET OutputRoot.XMLNSC.Records.rec[i-1].JZRQ = InputRoot.XML.workbook.sheet[1].row[i].cell[4];
  			SET OutputRoot.XMLNSC.Records.rec[i-1].ZCZJ = InputRoot.XML.workbook.sheet[1].row[i].cell[5];
  			SET OutputRoot.XMLNSC.Records.rec[i-1].FDDBR = InputRoot.XML.workbook.sheet[1].row[i].cell[6];
  			SET OutputRoot.XMLNSC.Records.rec[i-1].ZJLX = InputRoot.XML.workbook.sheet[1].row[i].cell[aaa];
  		    -- PROPAGATE; 
  			SET i = i+1; 
        END WHILE;   
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE ExcelTest_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE ReadExcelSwatch_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		-- OutLocal
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE FILTER MODULE ReadExcelSwatch_Filter
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		RETURN TRUE;
	END;

END MODULE;
