
DECLARE RecordCount SHARED INTEGER 0;
DECLARE FailedCount SHARED INTEGER 0;
CREATE COMPUTE MODULE DBFlow_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		-- Get Data From DPT
		SET Environment.Variables.DPT.Record[] = (SELECT T.ZZJGDM, T.QYMC, T.KSRQ, T.JZRQ, T.ZCZJ, T.FDDBR, T.ZJLX FROM Database.DPT AS T);
		DECLARE count INTEGER;
        SET count = CARDINALITY(Environment.Variables.DPT.Record[]);
        SET RecordCount = count;
        DECLARE i INTEGER 1;
		FOR source AS Environment.Variables.DPT.Record[] DO
			SET OutputRoot.XMLNSC.DPT.Record.ID = i;
			SET OutputRoot.XMLNSC.DPT.Record.COUNT = count;
			SET OutputRoot.XMLNSC.DPT.Record.ZZJGDM = source.ZZJGDM;
			SET OutputRoot.XMLNSC.DPT.Record.QYMC = source.QYMC;
			SET OutputRoot.XMLNSC.DPT.Record.KSRQ = source.KSRQ;
			SET OutputRoot.XMLNSC.DPT.Record.JZRQ = source.JZRQ;
			SET OutputRoot.XMLNSC.DPT.Record.ZCZJ = source.ZCZJ;
			SET OutputRoot.XMLNSC.DPT.Record.FDDBR = source.FDDBR;
			SET OutputRoot.XMLNSC.DPT.Record.ZJLX = source.ZJLX;
     		PROPAGATE;
     		SET i = i + 1;
		END FOR;
		
		RETURN FALSE;
		--RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE DBFlow_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		IF InputRoot.XMLNSC.DPT.Record.ID = 1 THEN
			SET OutputLocalEnvironment.Variables.TIME = CURRENT_TIMESTAMP;
			SET OutputLocalEnvironment.Variables.TYPE = '信息';
			SET OutputLocalEnvironment.Variables.PROCESS = '流程1';
			SET OutputLocalEnvironment.Variables.FILE = InputLocalEnvironment.File.Name;
			SET OutputLocalEnvironment.Variables.AUDIT = '';
			SET OutputLocalEnvironment.Variables.NOTES = '文件读取开始';
			PROPAGATE;
		END IF;
		
		-- 组织机构代码验证
		DECLARE isValid Boolean FALSE;
		DECLARE front CHARACTER;
		DECLARE checkBit CHARACTER;
		IF LENGTH(InputRoot.XMLNSC.DPT.Record.ZZJGDM) = 9 THEN
			SET front = SUBSTRING(InputRoot.XMLNSC.DPT.Record.ZZJGDM FROM 1 FOR 8);
			SET checkBit = SUBSTRING(InputRoot.XMLNSC.DPT.Record.ZZJGDM FROM 9 FOR 1);
			CALL checkOrgCode(front, checkBit, isValid);
		END IF;
		
		IF isValid = FALSE THEN
			SET FailedCount = FailedCount + 1;
	    	
	    	SET OutputLocalEnvironment.Variables.TABLE = 'DPT';
			SET OutputLocalEnvironment.Variables.ID = InputRoot.XMLNSC.DPT.Record.ID;
			SET OutputLocalEnvironment.Variables.REASON = '组织机构代码错误';
			SET OutputLocalEnvironment.Variables.ZZJGDM = InputRoot.XMLNSC.DPT.Record.ZZJGDM;
			SET OutputLocalEnvironment.Variables.QYMC = InputRoot.XMLNSC.DPT.Record.QYMC;
			SET OutputLocalEnvironment.Variables.KSRQ = InputRoot.XMLNSC.DPT.Record.KSRQ;
			SET OutputLocalEnvironment.Variables.JZRQ = InputRoot.XMLNSC.DPT.Record.JZRQ;
			SET OutputLocalEnvironment.Variables.ZCZJ = InputRoot.XMLNSC.DPT.Record.ZCZJ;
			SET OutputLocalEnvironment.Variables.FDDBR = InputRoot.XMLNSC.DPT.Record.FDDBR;
			SET OutputLocalEnvironment.Variables.ZJLX = InputRoot.XMLNSC.DPT.Record.ZJLX;
			PROPAGATE TO TERMINAL 'out2';
				
	    	IF InputRoot.XMLNSC.DPT.Record.ID = InputRoot.XMLNSC.DPT.Record.COUNT THEN
	    		SET OutputLocalEnvironment.Variables.TIME = CURRENT_TIMESTAMP;
				SET OutputLocalEnvironment.Variables.TYPE = '信息';
				SET OutputLocalEnvironment.Variables.PROCESS = '流程1';
				SET OutputLocalEnvironment.Variables.FILE = InputLocalEnvironment.File.Name;
				SET OutputLocalEnvironment.Variables.AUDIT = '总数:'||CAST(RecordCount AS CHARACTER)||
				                                       ' 正确：'||CAST(RecordCount - FailedCount AS CHARACTER)||
				                                       ' 错误：'||CAST(FailedCount AS CHARACTER);
				SET OutputLocalEnvironment.Variables.NOTES = '文件读取结束';
				PROPAGATE;
	    	END IF;

	    	RETURN FALSE;
		END IF;
     		
     	-- 日期验证
     	DECLARE sourceDate CHARACTER;
        DECLARE KSRQ DATE;
        DECLARE JZRQ DATE;
        DECLARE KSRQCheck DATE;
        DECLARE JZRQCheck DATE;
        DECLARE pattern CHARACTER 'yyyy-MM-dd';
        -- 设立日期
        SET KSRQ = InputRoot.XMLNSC.DPT.Record.KSRQ;
        SET sourceDate = CAST(KSRQ AS CHARACTER FORMAT 'yyyy-MM-dd HHmmss');
        SET sourceDate = SUBSTRING(sourceDate BEFORE ' ');
	    SET KSRQ = CAST(sourceDate AS DATE FORMAT pattern);
	    -- 年审日期
	    SET JZRQ = InputRoot.XMLNSC.DPT.Record.JZRQ;
	    SET sourceDate = CAST(JZRQ AS CHARACTER FORMAT 'yyyy-MM-dd HHmmss');
	    SET sourceDate = SUBSTRING(sourceDate BEFORE ' ');
	    SET JZRQ = CAST(sourceDate AS DATE FORMAT pattern);
	    
	    SET KSRQCheck = CAST('1949-10-01' AS DATE FORMAT pattern);
	    SET JZRQCheck = CAST('2009-01-01' AS DATE FORMAT pattern);
	    IF (KSRQ <= KSRQCheck) OR (JZRQ >= JZRQCheck) OR KSRQ > JZRQ THEN
	    	
	    	SET FailedCount = FailedCount + 1;
	    	
	    	SET OutputLocalEnvironment.Variables.TABLE = 'DPT';
			SET OutputLocalEnvironment.Variables.ID = InputRoot.XMLNSC.DPT.Record.ID;
			SET OutputLocalEnvironment.Variables.REASON = '日期错误';
			SET OutputLocalEnvironment.Variables.ZZJGDM = InputRoot.XMLNSC.DPT.Record.ZZJGDM;
			SET OutputLocalEnvironment.Variables.QYMC = InputRoot.XMLNSC.DPT.Record.QYMC;
			SET OutputLocalEnvironment.Variables.KSRQ = InputRoot.XMLNSC.DPT.Record.KSRQ;
			SET OutputLocalEnvironment.Variables.JZRQ = InputRoot.XMLNSC.DPT.Record.JZRQ;
			SET OutputLocalEnvironment.Variables.ZCZJ = InputRoot.XMLNSC.DPT.Record.ZCZJ;
			SET OutputLocalEnvironment.Variables.FDDBR = InputRoot.XMLNSC.DPT.Record.FDDBR;
			SET OutputLocalEnvironment.Variables.ZJLX = InputRoot.XMLNSC.DPT.Record.ZJLX;
			PROPAGATE TO TERMINAL 'out2';
				
	    	IF InputRoot.XMLNSC.DPT.Record.ID = InputRoot.XMLNSC.DPT.Record.COUNT THEN
	    		SET OutputLocalEnvironment.Variables.TIME = CURRENT_TIMESTAMP;
				SET OutputLocalEnvironment.Variables.TYPE = '信息';
				SET OutputLocalEnvironment.Variables.PROCESS = '流程1';
				SET OutputLocalEnvironment.Variables.FILE = InputLocalEnvironment.File.Name;
				SET OutputLocalEnvironment.Variables.AUDIT = '总数:'||CAST(RecordCount AS CHARACTER)||
				                                       ' 正确：'||CAST(RecordCount - FailedCount AS CHARACTER)||
				                                       ' 错误：'||CAST(FailedCount AS CHARACTER);
				SET OutputLocalEnvironment.Variables.NOTES = '文件读取结束';
				PROPAGATE;
	    	END IF;

	    	RETURN FALSE;
	    END IF;
	    
	    -- 转化为元
	    DECLARE money DECIMAL;
	    DECLARE moneyInt INTEGER;
        SET money = CAST(InputRoot.XMLNSC.DPT.Record.ZCZJ AS DECIMAL);
	    SET money = money*10000;
	    
	    
	    -- 剔除*，？
	    IF CONTAINS(InputRoot.XMLNSC.DPT.Record.QYMC, '*') OR CONTAINS(InputRoot.XMLNSC.DPT.Record.QYMC, '?') THEN
	    	
	    	SET FailedCount = FailedCount + 1;
	    	
	    	SET OutputLocalEnvironment.Variables.TABLE = 'DPT';
			SET OutputLocalEnvironment.Variables.ID = InputRoot.XMLNSC.DPT.Record.ID;
			SET OutputLocalEnvironment.Variables.REASON = '含有特殊字符';
			SET OutputLocalEnvironment.Variables.ZZJGDM = InputRoot.XMLNSC.DPT.Record.ZZJGDM;
			SET OutputLocalEnvironment.Variables.QYMC = InputRoot.XMLNSC.DPT.Record.QYMC;
			SET OutputLocalEnvironment.Variables.KSRQ = InputRoot.XMLNSC.DPT.Record.KSRQ;
			SET OutputLocalEnvironment.Variables.JZRQ = InputRoot.XMLNSC.DPT.Record.JZRQ;
			SET OutputLocalEnvironment.Variables.ZCZJ = InputRoot.XMLNSC.DPT.Record.ZCZJ;
			SET OutputLocalEnvironment.Variables.FDDBR = InputRoot.XMLNSC.DPT.Record.FDDBR;
			SET OutputLocalEnvironment.Variables.ZJLX = InputRoot.XMLNSC.DPT.Record.ZJLX;
			PROPAGATE TO TERMINAL 'out2';
					
	    	IF InputRoot.XMLNSC.DPT.Record.ID = InputRoot.XMLNSC.DPT.Record.COUNT THEN
	    		SET OutputLocalEnvironment.Variables.TIME = CURRENT_TIMESTAMP;
				SET OutputLocalEnvironment.Variables.TYPE = '信息';
				SET OutputLocalEnvironment.Variables.PROCESS = '流程1';
				SET OutputLocalEnvironment.Variables.FILE = InputLocalEnvironment.File.Name;
				SET OutputLocalEnvironment.Variables.AUDIT = '总数:'||CAST(RecordCount AS CHARACTER)||
															' 正确：'||CAST(RecordCount - FailedCount AS CHARACTER)||
															' 错误：'||CAST(FailedCount AS CHARACTER);
				SET OutputLocalEnvironment.Variables.NOTES = '文件读取结束';
				PROPAGATE;	
	    	END IF;
	    	
	    	RETURN FALSE;
	    END IF;
	    
	    -- 法人代表
	    IF LENGTH(TRIM(InputRoot.XMLNSC.DPT.Record.FDDBR)) > 20 THEN
	    	SET FailedCount = FailedCount + 1;
	    	
	    	SET OutputLocalEnvironment.Variables.TABLE = 'DPT';
			SET OutputLocalEnvironment.Variables.ID = InputRoot.XMLNSC.DPT.Record.ID;
			SET OutputLocalEnvironment.Variables.REASON = '字段超长';
			SET OutputLocalEnvironment.Variables.ZZJGDM = InputRoot.XMLNSC.DPT.Record.ZZJGDM;
			SET OutputLocalEnvironment.Variables.QYMC = InputRoot.XMLNSC.DPT.Record.QYMC;
			SET OutputLocalEnvironment.Variables.KSRQ = InputRoot.XMLNSC.DPT.Record.KSRQ;
			SET OutputLocalEnvironment.Variables.JZRQ = InputRoot.XMLNSC.DPT.Record.JZRQ;
			SET OutputLocalEnvironment.Variables.ZCZJ = InputRoot.XMLNSC.DPT.Record.ZCZJ;
			SET OutputLocalEnvironment.Variables.FDDBR = InputRoot.XMLNSC.DPT.Record.FDDBR;
			SET OutputLocalEnvironment.Variables.ZJLX = InputRoot.XMLNSC.DPT.Record.ZJLX;
			PROPAGATE TO TERMINAL 'out2';
					
	    	IF InputRoot.XMLNSC.DPT.Record.ID = InputRoot.XMLNSC.DPT.Record.COUNT THEN
	    		SET OutputLocalEnvironment.Variables.TIME = CURRENT_TIMESTAMP;
				SET OutputLocalEnvironment.Variables.TYPE = '信息';
				SET OutputLocalEnvironment.Variables.PROCESS = '流程1';
				SET OutputLocalEnvironment.Variables.FILE = InputLocalEnvironment.File.Name;
				SET OutputLocalEnvironment.Variables.AUDIT = '总数:'||CAST(RecordCount AS CHARACTER)||
															' 正确：'||CAST(RecordCount - FailedCount AS CHARACTER)||
															' 错误：'||CAST(FailedCount AS CHARACTER);
				SET OutputLocalEnvironment.Variables.NOTES = '文件读取结束';
				PROPAGATE;	
	    	END IF;
	    	
	    	RETURN FALSE;
	    END IF;
	    
	    -- 去空格
	    DECLARE CompanyName CHARACTER;
	    SET CompanyName = TRIM(InputRoot.XMLNSC.DPT.Record.QYMC);
	    
	    --GET NEW TYPE
	    DECLARE OldType ChARACTER;
	    DECLARE NewType ChARACTER;
	    SET OldType = InputRoot.XMLNSC.DPT.Record.ZJLX;
	    SET OutputRoot.XMLNSC.NewType[] = (SELECT T.New_Type FROM Database.AT1_DICT AS T WHERE T.Old_Type = OldType);
	    IF CARDINALITY(OutputRoot.XMLNSC.NewType[]) > 0 THEN
	    	SET NewType = OutputRoot.XMLNSC.NewType[1].New_Type;
	    END IF;
	    
	    --INSERT DATA TO AT1
	    INSERT INTO Database.AT1 (InFileName,InFileNo,zzjgdm,UnitName,StartTime,EndTime,Cash,PeopleName,CerType,OutXMLFileName) 
	         VALUES (InputLocalEnvironment.File.Name,InputRoot.XMLNSC.DPT.Record.ID,TRIM(InputRoot.XMLNSC.DPT.Record.ZZJGDM),
	             CompanyName,KSRQ,JZRQ,money,TRIM(InputRoot.XMLNSC.DPT.Record.FDDBR),NewType,'a2c.xml');
	       
	    -- End Data
	    IF InputRoot.XMLNSC.DPT.Record.ID = InputRoot.XMLNSC.DPT.Record.COUNT THEN
	    	SET OutputLocalEnvironment.Variables.TIME = CURRENT_TIMESTAMP;
			SET OutputLocalEnvironment.Variables.TYPE = '信息';
			SET OutputLocalEnvironment.Variables.PROCESS = '流程1';
			SET OutputLocalEnvironment.Variables.FILE = InputLocalEnvironment.File.Name;
			SET OutputLocalEnvironment.Variables.AUDIT = '总数:'||CAST(RecordCount AS CHARACTER)||
														' 正确：'||CAST(RecordCount - FailedCount AS CHARACTER)||
														' 错误：'||CAST(FailedCount AS CHARACTER);
			SET OutputLocalEnvironment.Variables.NOTES = '文件读取结束';
			PROPAGATE;
	    END IF;
	    
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
		CREATE PROCEDURE checkOrgCode (
  		IN orgCode CHARACTER,
  		IN verifyCode Char,
		OUT isValid  Boolean)
BEGIN
    	SET Environment.WeightFactors[1] = 3;
    	SET Environment.WeightFactors[2] = 7;
    	SET Environment.WeightFactors[3] = 9;
    	SET Environment.WeightFactors[4] = 10;
    	SET Environment.WeightFactors[5] = 5;
    	SET Environment.WeightFactors[6] = 8;
    	SET Environment.WeightFactors[7] = 4;
    	SET Environment.WeightFactors[8] = 2;

    	DECLARE I INTEGER 1;
		DECLARE J INTEGER 8;
		
		DECLARE sum INTEGER 0;
		DECLARE weight INTEGER;
		DECLARE codeNum INTEGER;
		
		WHILE I <= J DO
			
			CALL getNumber(SUBSTRING(orgCode FROM I FOR 1), codeNum);
			SET weight = Environment.WeightFactors[I];
			SET sum = sum + (codeNum * weight);
			
			SET I = I + 1;

		END WHILE;
		
		DECLARE modnum INTEGER;
		SET modnum = 11 - MOD(sum, 11);
		
		IF modnum = 10 AND verifyCode = 'X' THEN
			SET isValid = true;
		ELSEIF modnum = 11 AND verifyCode = '0' THEN
			SET isValid = true;
		ELSEIF verifyCode = CAST(modnum AS CHAR) THEN
			SET isValid = true;
		ELSE 
			SET isValid = false;
		END IF;		
		
END;
	
CREATE PROCEDURE getNumber(IN chaa CHAR, OUT num INTEGER)
BEGIN
	SET num = 
   			CASE chaa
	      		WHEN '0' THEN 0 
	   			WHEN '1' THEN 1
				WHEN '2' THEN 2
				WHEN '3' THEN 3
				WHEN '4' THEN 4
				WHEN '5' THEN 5
				WHEN '6' THEN 6
				WHEN '7' THEN 7
				WHEN '8' THEN 8
				WHEN '9' THEN 9
				WHEN 'A' THEN 10
				WHEN 'B' THEN 11
				WHEN 'C' THEN 12				
				WHEN 'D' THEN 13
				WHEN 'E' THEN 14
				WHEN 'F' THEN 15
				WHEN 'G' THEN 16
				WHEN 'H' THEN 17
				WHEN 'I' THEN 18
				WHEN 'J' THEN 19				
				WHEN 'K' THEN 20
				WHEN 'L' THEN 21
				WHEN 'M' THEN 22
				WHEN 'N' THEN 23
				WHEN 'O' THEN 24
				WHEN 'P' THEN 25
				WHEN 'Q' THEN 26
				WHEN 'R' THEN 27				
				WHEN 'S' THEN 28
				WHEN 'T' THEN 29
				WHEN 'U' THEN 30
				WHEN 'V' THEN 31
				WHEN 'W' THEN 32
				WHEN 'X' THEN 33
				WHEN 'Y' THEN 34				
				WHEN 'Z' THEN 35
			ELSE 0
   			END;
END;
END MODULE;
