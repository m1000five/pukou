
DECLARE recordCount SHARED INTEGER 0;
DECLARE FailedRecord SHARED INTEGER 0;
DECLARE ExistsCount SHARED INTEGER 0;

CREATE COMPUTE MODULE JSXYXmlToData_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		SET OutputLocalEnvironment.Variables.TIME = CURRENT_TIMESTAMP;
		SET OutputLocalEnvironment.Variables.TYPE = '信息';
		SET OutputLocalEnvironment.Variables.PROCESS = 'DAT1表数据装载';
		SET OutputLocalEnvironment.Variables.FILE = 'd:\xml\1.xml';
		SET OutputLocalEnvironment.Variables.AUDIT = '总共记录数目:';
		SET OutputLocalEnvironment.Variables.NOTES = '开始插入数据库';		

		PROPAGATE TO TERMINAL 'out1';				

		DECLARE i Integer 1;
		DECLARE insertSql CHARACTER;		

		DECLARE RECID CHARACTER;
		DECLARE BATCHNUM CHARACTER;
		DECLARE FILECODE CHARACTER;
		DECLARE SOURCENAME CHARACTER;
		DECLARE LINENUM CHARACTER;
		DECLARE CREATETIME CHARACTER ;
		DECLARE MD5CODE CHARACTER;
		DECLARE ZZJGDM CHARACTER;
		DECLARE A1 CHARACTER;
		DECLARE A2 CHARACTER;
		DECLARE A3 CHARACTER;
		DECLARE A4 CHARACTER;
		DECLARE A5 CHARACTER;
		DECLARE A6 CHARACTER;
		DECLARE A7 CHARACTER;
		DECLARE A8 CHARACTER;
		DECLARE A9 CHARACTER;
		DECLARE A10 CHARACTER;
		DECLARE sql CHARACTER;
		DECLARE data_row ROW;
		DECLARE count INTEGER 0;	
		DECLARE table_sql CHARACTER;
		
		DECLARE table_name CHARACTER;				

		DECLARE table_data ROW;	
		--从数据库中取出表名			
		-- SET table_sql='select * from t_table where messageid = (select messageid from t_filepreview where fileid=?)';
		--
		-- SET table_data.row[] = passthru(table_sql to Database.orcl values(SUBSTRING(InputLocalEnvironment.File.Name BEFORE '.')));
		--
		-- SET table_name = table_data.row[1].TABLENAME;
		SET table_name='T_DISHUI_DJXX';

		SET recordCount = CARDINALITY(InputRoot.XMLNSC.root.rowset.row[]);		

		IF table_name = 'T_DISHUI_DJXX' THEN
		--	WHILE i <=recordCount DO				
			FOR source1 AS InputRoot.XMLNSC.root.rowset.row[] DO
				SET RECID = TRIM(source1.RECID);
				SET BATCHNUM = TRIM(source1.BATCHNUM);
				SET FILECODE = TRIM(source1.FILECODE);
				SET SOURCENAME = TRIM(source1.SOURCENAME);
				SET LINENUM = TRIM(source1.LINENUM);
				SET CREATETIME = TRIM(source1.CREATETIME) ;
				SET MD5CODE = TRIM(source1.MD5CODE);
				SET ZZJGDM = TRIM(source1.ZZJGDM);
				SET A1 = TRIM(source1.QYMC);
				SET A2 = TRIM(source1.QYZCH);
				SET A3 = TRIM(source1.NSRSBH);
				SET A4 = TRIM(source1.HSFSDM);
				SET A5 = TRIM(source1.HSFSMC);
				SET A6 = TRIM(source1.ZY);
				SET A7 = TRIM(source1.JY);
				SET A8 = TRIM(source1.DJRQ);
				SET A9 =TRIM(source1.DJJGDM);
				SET A10 = TRIM(source1.DJJGMC);
				
				--去除重复的数据
				SET sql ='select count(1) num from t_dishui_djxx_tmp where recid=?';
				SET data_row.row[]= passthru(sql to Database.orcl values(RECID));
				SET count = data_row.row[1].NUM;			 
							 
				--验证重复的数据
				IF count <> 0 THEN
					SET ExistsCount = ExistsCount + 1;
					--重复数据入疑问数据库表 t_dishui_djxx_err
					CALL InsertErrData('数据重复',BATCHNUM,SOURCENAME,ZZJGDM,
										A1,A2,A3,A4,A5,A6,A7,
										A8,A9,A10,' ',CAST(LINENUM AS INTEGER));
				END IF;			
			
			
				--如果数据不重复将数据插入数据库
				IF count=0 THEN			  	
					DECLARE isValid Boolean FALSE;
					DECLARE front CHARACTER;
					DECLARE checkBit CHARACTER;
					IF LENGTH(ZZJGDM) = 9 THEN
						SET front = SUBSTRING(ZZJGDM FROM 1 FOR 8);
						SET checkBit = SUBSTRING(ZZJGDM FROM 9 FOR 1);
						CALL checkOrgCode(front, checkBit, isValid);
					END IF;				

					IF isValid = FALSE THEN
						SET FailedRecord = FailedRecord + 1;
						--格式错误入疑问数据库表
						-- INSERT Err Data
						CALL InsertErrData('组织机构代码错误',BATCHNUM,SOURCENAME,ZZJGDM,
										A1,A2,A3,A4,A5,A6,A7,
										A8,A9,A10,' ',CAST(LINENUM AS INTEGER));				
					ELSEIF IsDate(A8)=FALSE THEN
						SET FailedRecord = FailedRecord + 1;
						--日期错误入疑问数据库表
						CALL InsertErrData('登记日期格式不正确',BATCHNUM,SOURCENAME,ZZJGDM,
										A1,A2,A3,A4,A5,A6,A7,
										A8,A9,A10,' ',CAST(LINENUM AS INTEGER));
					END IF;
				END IF;
				
					--所有数据都入原始库表
				insert into Database.t_dishui_djxx_tmp(RECID,BATCHNUM,FILECODE,SOURCENAME,LINENUM,CREATETIME,MD5CODE,ZZJGDM,QYMC,QYZCH,NSRSBH,HSFSDM,HSFSMC,ZY,JY,DJRQ,DJJGDM,DJJGMC)
						values(RECID,BATCHNUM,FILECODE,SOURCENAME,LINENUM,CREATETIME,MD5CODE,ZZJGDM,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10);
--				insert into Database.t_dishui_djxx_tmp(RECID,BATCHNUM,FILECODE,SOURCENAME,LINENUM,CREATETIME,MD5CODE,ZZJGDM,QYMC,QYZCH,NSRSBH,HSFSDM,HSFSMC,ZY,JY,DJRQ,DJJGDM,DJJGMC)
--					values(source1.RECID,source1.BATCHNUM,source1.FILECODE,source1.SOURCENAME,source1.LINENUM,source1.CREATETIME,source1.MD5CODE,source1.ZZJGDM,source1.QYMC,source1.QYZCH,source1.NSRSBH,source1.HSFSDM,source1.HSFSMC,source1.ZY,source1.JY,source1.DJRQ,source1.DJJGDM,source1.DJJGMC);

				SET i = i+1;
		--	END WHILE;
	END FOR;
		END IF;		

		IF table_name = 'T_DISHUI_ZXXX' THEN
			WHILE i <=recordCount DO
				SET RECID = InputRoot.XMLNSC.root.rowset.row[i].RECID;
				SET BATCHNUM = InputRoot.XMLNSC.root.rowset.row[i].BATCHNUM;
				SET FILECODE = InputRoot.XMLNSC.root.rowset.row[i].FILECODE;
				SET SOURCENAME = InputRoot.XMLNSC.root.rowset.row[i].SOURCENAME;
				SET LINENUM = InputRoot.XMLNSC.root.rowset.row[i].LINENUM;
				SET CREATETIME = InputRoot.XMLNSC.root.rowset.row[i].CREATETIME ;
				SET MD5CODE = InputRoot.XMLNSC.root.rowset.row[i].MD5CODE;
				SET ZZJGDM = InputRoot.XMLNSC.root.rowset.row[i].ZZJGDM;
				SET A1 = OutputRoot.XMLNSC.root.rowset.row[i].QYMC;
				SET A2 = OutputRoot.XMLNSC.root.rowset.row[i].QYZCH;
				SET A3 = OutputRoot.XMLNSC.root.rowset.row[i].NSRSBH;
				SET A4 = OutputRoot.XMLNSC.root.rowset.row[i].ZXLXDM;
				SET A5 = OutputRoot.XMLNSC.root.rowset.row[i].ZXLXMC;
				SET A6 = OutputRoot.XMLNSC.root.rowset.row[i].ZXYYDM;
				SET A7 = OutputRoot.XMLNSC.root.rowset.row[i].ZXYYMC;
				SET A8 = OutputRoot.XMLNSC.root.rowset.row[i].ZXRQ;
				SET A9 = OutputRoot.XMLNSC.root.rowset.row[i].ZXJGDM;
				--将数据插入数据库
				SET sql ='select count(1) num from t_dishui_zxxx_tmp where recid=?';
				SET data_row.row[]= passthru(sql to Database.orcl values(RECID));
				SET count = data_row.row[1].NUM;
				IF count=0 THEN
					insert into Database.t_dishui_zxxx_tmp(RECID,BATCHNUM,FILECODE,SOURCENAME,LINENUM,CREATETIME,MD5CODE,ZZJGDM,QYMC,QYZCH,NSRSBH,ZXLXDM,ZXLXMC,ZXYYDM,ZXYYMC,ZXRQ,ZXJGDM)
						values(RECID,BATCHNUM,FILECODE,SOURCENAME,LINENUM,CREATETIME,MD5CODE,ZZJGDM,A1,A2,A3,A4,A5,A6,A7,A8,A9);
				END IF;
				SET i = i+1;			

			END WHILE;
		END IF;		

		RETURN TRUE;
	END;	
	
	

	CREATE PROCEDURE checkOrgCode (
	IN orgCode CHARACTER,
	IN verifyCode Char,
	OUT isValid Boolean)
	BEGIN
		SET Environment.WeightFactors[1] = 3;
		SET Environment.WeightFactors[2] = 7;
		SET Environment.WeightFactors[3] = 9;
		SET Environment.WeightFactors[4] = 10;
		SET Environment.WeightFactors[5] = 5;
		SET Environment.WeightFactors[6] = 8;
		SET Environment.WeightFactors[7] = 4;
		SET Environment.WeightFactors[8] = 2;

		DECLARE I INTEGER 1;
		DECLARE J INTEGER 8;		

		DECLARE sum INTEGER 0;
		DECLARE weight INTEGER;
		DECLARE codeNum INTEGER;		

		WHILE I <= J DO			

			CALL getNumber(SUBSTRING(orgCode FROM I FOR 1), codeNum);
			SET weight = Environment.WeightFactors[I];
			SET sum = sum + (codeNum * weight);			

			SET I = I + 1;

		END WHILE;		

		DECLARE modnum INTEGER;
		SET modnum = 11 - MOD(sum, 11);		

		IF modnum = 10 AND verifyCode = 'X' THEN
			SET isValid = true;
		ELSEIF modnum = 11 AND verifyCode = '0' THEN
			SET isValid = true;
		ELSEIF verifyCode = CAST(modnum AS CHAR) THEN
			SET isValid = true;
		ELSE
			SET isValid = false;
		END IF;		

	END;

	CREATE PROCEDURE getNumber(IN chaa CHAR, OUT num INTEGER)
	BEGIN
		SET num =
		CASE chaa
		WHEN '0' THEN 0
		WHEN '1' THEN 1
		WHEN '2' THEN 2
		WHEN '3' THEN 3
		WHEN '4' THEN 4
		WHEN '5' THEN 5
		WHEN '6' THEN 6
		WHEN '7' THEN 7
		WHEN '8' THEN 8
		WHEN '9' THEN 9
		WHEN 'A' THEN 10
		WHEN 'B' THEN 11
		WHEN 'C' THEN 12
		WHEN 'D' THEN 13
		WHEN 'E' THEN 14
		WHEN 'F' THEN 15
		WHEN 'G' THEN 16
		WHEN 'H' THEN 17
		WHEN 'I' THEN 18
		WHEN 'J' THEN 19
		WHEN 'K' THEN 20
		WHEN 'L' THEN 21
		WHEN 'M' THEN 22
		WHEN 'N' THEN 23
		WHEN 'O' THEN 24
		WHEN 'P' THEN 25
		WHEN 'Q' THEN 26
		WHEN 'R' THEN 27
		WHEN 'S' THEN 28
		WHEN 'T' THEN 29
		WHEN 'U' THEN 30
		WHEN 'V' THEN 31
		WHEN 'W' THEN 32
		WHEN 'X' THEN 33
		WHEN 'Y' THEN 34
		WHEN 'Z' THEN 35
		ELSE 0
		END;
	END;


	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE JSXYXmlToData_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();		

		SET OutputLocalEnvironment.Variables.TIME = CURRENT_TIMESTAMP;
		SET OutputLocalEnvironment.Variables.TYPE = '信息';
		SET OutputLocalEnvironment.Variables.PROCESS = 'DAT1表数据装载';
		SET OutputLocalEnvironment.Variables.FILE = 'd:\xml\1.xml';
		SET OutputLocalEnvironment.Variables.AUDIT = ' 总共记录数目:'||CAST(recordCount AS CHARACTER) || '  其中重复数目：'||CAST(ExistsCount AS CHARACTER) || '  格式错误的数目:'||CAST(FailedRecord AS CHARACTER);
		SET OutputLocalEnvironment.Variables.NOTES = '数据插入数据库成功';
		-- PROPAGATE;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE JSXYXmlToData_Compute2
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		SET recordCount=0;
		SET FailedRecord = 0;
		SET ExistsCount=0; 
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

--日期格式校验的正则表达示
CREATE PROCEDURE IsNum(IN P1 CHARACTER)
 RETURNS BOOLEAN
 LANGUAGE JAVA 
 EXTERNAL NAME "com.ibm.www.Common.IsNum";
 
 CREATE PROCEDURE IsDate(IN P1 CHARACTER)
 RETURNS BOOLEAN
 LANGUAGE JAVA 
 EXTERNAL NAME "com.ibm.www.Common.IsDate";
 
 
 CREATE PROCEDURE InsertErrData( IN reason CHARACTER, 
 								IN BATCHNUM CHARACTER,
 								IN SOURCENAME CHARACTER,
								IN ZZJGDM CHARACTER,
								IN QYMC CHARACTER,
								IN QYZCH CHARACTER, 
								IN NSRSBH CHARACTER, 
								IN HSFSDM CHARACTER, 
								IN HSFSMC CHARACTER, 
								IN ZY CHARACTER, 
								IN JY CHARACTER, 
								IN DJRQ CHARACTER, 
								IN DJJGDM CHARACTER,
								IN DJJGMC CHARACTER,
								IN ALLDATA CHARACTER,
								IN lineNum INTEGER ) BEGIN
									
		DECLARE strSql CHARACTER;
		SET strSql = 'INSERT INTO t_dishui_djxx_err (
						BATCHNUM,SOURCENAME,LINENUM,ALLDATA,ERRORREASON,
						ZZJGDM,QYMC,QYZCH,NSRSBH,HSFSDM,
						HSFSMC,ZY,JY,DJRQ,DJJGDM, 
						DJJGMC) 
					 values (
					 	?,?,?,?,?,
						?,?,?,?,?,
						?,?,?,?,?,
						?
					 )';		
		PASSTHRU strSql to Database.orcl values (	
									BATCHNUM,SOURCENAME,lineNum,ALLDATA,reason,												
									ZZJGDM, QYMC, QYZCH, NSRSBH, HSFSDM, 
									HSFSMC, ZY, JY, DJRQ, DJJGDM, 
									DJJGMC
									);
END;


