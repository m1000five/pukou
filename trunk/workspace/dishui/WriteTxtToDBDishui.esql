
DECLARE TableName SHARED CHARACTER ;
DECLARE FileName SHARED CHARACTER;
DECLARE RowDataColConfig SHARED ROW;
DECLARE TxtMessageID SHARED CHARACTER;

DECLARE RowDicColHSFS SHARED ROW;

--日志
DECLARE allCount SHARED INTEGER 0;
DECLARE sharedvalue SHARED INTEGER 10;

DECLARE LineNumDishui SHARED INTEGER 0;

DECLARE DataLineNumDishui SHARED INTEGER 0;

DECLARE CorrectNumDishui SHARED INTEGER 0;
DECLARE ExistsNumDishui SHARED INTEGER 0;
DECLARE FormatErrorDishui SHARED INTEGER 0;
DECLARE StandSplitterDishui SHARED CHARACTER '||';

DECLARE IsCheckZTBS SHARED BOOLEAN;
DECLARE IsCheckNSRSBH SHARED BOOLEAN;
DECLARE IsCheckDate SHARED BOOLEAN;

DECLARE LogResult SHARED CHARACTER;

DECLARE OrignFileName SHARED CHARACTER;

create function test() returns boolean
begin
	return false;
end;

CREATE PROCEDURE ResetSharedValue() BEGIN
	SET RowDataColConfig  = NULL;
	SET TableName = NULL;
	SET FileName = NULL;
	SET TxtMessageID=NULL;
	SET LineNumDishui = 0;
	SET DataLineNumDishui = 0;
	SET CorrectNumDishui = 0;
	SET ExistsNumDishui = 0;		
	SET FormatErrorDishui = 0;
	SET allCount= 0;
	SET OrignFileName = NULL;
	SET RowDicColHSFS  = NULL;
END;

CREATE function NotNULL(IN para CHARACTER) returns CHARACTER 
BEGIN
	DECLARE para1 CHARACTER;
	IF para IS NULL OR UPPER(para) = 'NULL' OR para = '' THEN
		SET para1 = ' ';
	ELSE
		SET para1 = para;
	END IF;
	return para1;
END;

CREATE PROCEDURE InsertErrData( IN reason CHARACTER, 
								IN ZZJGDM CHARACTER,
								IN QYMC CHARACTER,
								IN QYZCH CHARACTER, 
								IN NSRSBH CHARACTER, 
								IN HSFSDM CHARACTER, 
								IN HSFSMC CHARACTER, 
								IN ZY CHARACTER, 
								IN JY CHARACTER, 
								IN DJRQ CHARACTER, 
								IN DJJGDM CHARACTER,
								IN DJJGMC CHARACTER,
								IN ALLDATA CHARACTER,
								IN lineNum INTEGER,
								IN fileName CHARACTER,
								IN errorType CHARACTER ) BEGIN
									
		DECLARE strSql CHARACTER;
		SET strSql = 'INSERT INTO t_dishui_djxx_err (
						SOURCENAME,LINENUM,ERRORTYPE,ERRORREASON,ALLDATA,
						ZZJGDM,QYMC,QYZCH,NSRSBH,HSFSDM,
						HSFSMC,ZY,JY,DJRQ,DJJGDM, 
						DJJGMC) 
					 values (
					 	?,?,?,?,?,
						?,?,?,?,?,
						?,?,?,?,?,
						?
					 )';		
		PASSTHRU strSql to Database.orcl values (	
									fileName,lineNum,errorType,reason,ALLDATA,												
									ZZJGDM, QYMC, QYZCH, NSRSBH, HSFSDM, 
									HSFSMC, ZY, JY, DJRQ, DJJGDM, 
									DJJGMC
									);
END;

CREATE COMPUTE MODULE WriteTxtToDBDishui_ResetFile
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputLocalEnvironment.Variables.TabName = TableName;	
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE WriteTxtToDBDishui_DJXXLine

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE strLine CHARACTER;
		DECLARE rowCol ROW;
		SET strLine = Environment.Variables.StrLine;
		
		SET LineNumDishui = LineNumDishui +1;
		
		
		--数据处理中日志			
		SET allCount = allCount+1;
		IF allCount = sharedvalue THEN
			CALL InsertLogDataProcess1('TXT文件处理中处理到'|| CAST(LineNumDishui AS CHARACTER)||'条',FileID,userData,2,'处理中','INFO');
			SET allCount = 0;
		END IF;
		
		-- Write Start Log
		IF LineNumDishui = 1 THEN
			SET LogResult = CAST(CURRENT_TIMESTAMP AS CHARACTER) || 
							' 信息' || 
							' 读取文件并入库' || 
							' ' || FileName || 
							'   ' || 
							' 文件读取开始';
			--	SET LogResult = '开始时间：' || CAST(CURRENT_TIMESTAMP AS CHARACTER);
			SET LogResult=CAST(CURRENT_TIMESTAMP AS CHARACTER);
			
			SET StartLineNum = GetStartLineNum(FileName, '0');
		END IF;		
		 
		-- 小于设定行则不处理
		IF LineNumDishui < StartLineNum THEN
			RETURN FALSE;
		END IF;	
		
		SET DataLineNumDishui = DataLineNumDishui + 1;
			
		-- 按照定界符循环处理读取记录
		DECLARE i INTEGER 1;
		DECLARE col CHARACTER;
		WHILE CONTAINS(strLine, StandSplitterDishui) DO
			SET col = SUBSTRING(strLine BEFORE StandSplitterDishui);
			SET rowCol.row[i].value = col;						
			SET strLine = SUBSTRING(strLine AFTER StandSplitter);
			SET i = i + 1;
		END WHILE;
		SET rowCol.row[i].value = strLine;	
		
		-- 判断列数是否满足
 
		-- 格式校验
		DECLARE ZZJGDM CHARACTER;
		DECLARE QYMC CHARACTER;
		DECLARE QYZCH CHARACTER;
		DECLARE NSRSBH CHARACTER; 
		DECLARE HSFSDM CHARACTER;
		DECLARE HSFSMC CHARACTER;
		DECLARE ZY CHARACTER;
		DECLARE JY CHARACTER;
		DECLARE DJRQ CHARACTER;
		DECLARE DJJGDM CHARACTER;
		DECLARE DJJGMC CHARACTER;

		IF cast(RowDataColConfig.row[1].ZZJGDM as INTEGER) <> 0 THEN
			SET ZZJGDM = NotNULL(TRIM(rowCol.row[cast(RowDataColConfig.row[1].ZZJGDM as INTEGER)].value));			
		ELSE
			SET ZZJGDM = ' ';
		END IF;
		IF cast(RowDataColConfig.row[1].QYMC as INTEGER) <> 0 THEN
			SET QYMC = NotNULL(TRIM(rowCol.row[cast(RowDataColConfig.row[1].QYMC as INTEGER)].value));			
		ELSE
			SET QYMC = ' ';
		END IF;
		IF cast(RowDataColConfig.row[1].QYZCH as INTEGER) <> 0 THEN
			SET QYZCH = NotNULL(TRIM(rowCol.row[cast(RowDataColConfig.row[1].QYZCH as INTEGER)].value));			
		ELSE
			SET QYZCH = ' ';
		END IF;
		IF cast(RowDataColConfig.row[1].NSRSBH as INTEGER) <> 0 THEN
			SET NSRSBH = NotNULL(TRIM(rowCol.row[cast(RowDataColConfig.row[1].NSRSBH as INTEGER)].value));			
		ELSE
			SET NSRSBH = ' ';
		END IF;
		IF cast(RowDataColConfig.row[1].HSFSDM as INTEGER) <> 0 THEN
			SET HSFSDM = NotNULL(TRIM(rowCol.row[cast(RowDataColConfig.row[1].HSFSDM as INTEGER)].value));			
		ELSE
			SET HSFSDM = ' ';
		END IF;
		IF cast(RowDataColConfig.row[1].HSFSMC as INTEGER) <> 0 THEN
			SET HSFSMC = NotNULL(TRIM(rowCol.row[cast(RowDataColConfig.row[1].HSFSMC as INTEGER)].value));			
		ELSE
			SET HSFSMC = ' ';
		END IF;
		IF cast(RowDataColConfig.row[1].ZY as INTEGER) <> 0 THEN
			SET ZY = NotNULL(TRIM(rowCol.row[cast(RowDataColConfig.row[1].ZY as INTEGER)].value));			
		ELSE
			SET ZY = ' ';
		END IF;
		IF cast(RowDataColConfig.row[1].JY as INTEGER) <> 0 THEN
			SET JY = NotNULL(TRIM(rowCol.row[cast(RowDataColConfig.row[1].JY as INTEGER)].value));			
		ELSE
			SET JY = ' ';
		END IF;
		IF cast(RowDataColConfig.row[1].DJRQ as INTEGER) <> 0 THEN
			SET DJRQ = NotNULL(TRIM(rowCol.row[cast(RowDataColConfig.row[1].DJRQ as INTEGER)].value));			
		ELSE
			SET DJRQ = ' ';
		END IF;
		IF cast(RowDataColConfig.row[1].DJJGDM as INTEGER) <> 0 THEN
			SET DJJGDM = NotNULL(TRIM(rowCol.row[cast(RowDataColConfig.row[1].DJJGDM as INTEGER)].value));			
		ELSE
			SET DJJGDM = ' ';
		END IF;
		IF cast(RowDataColConfig.row[1].DJJGMC as INTEGER) <> 0 THEN
			SET DJJGMC = NotNULL(TRIM(rowCol.row[cast(RowDataColConfig.row[1].DJJGMC as INTEGER)].value));			
		ELSE
			SET DJJGMC = ' ';
		END IF;
		
		-- 组织机构代码、企业名称、工商注册：至少填一个
		IF ( ZZJGDM IS NULL OR ZZJGDM = '')  AND 
			( QYMC IS NULL OR QYMC = '')  AND 
			( QYZCH IS NULL OR QYZCH = '')  AND IsCheckZTBS = TRUE
		THEN
			Set FormatErrorDishui = FormatErrorDishui + 1;
			CALL InsertErrData('组织机构代码、企业名称、工商注册：都为空', ZZJGDM, QYMC, QYZCH, NSRSBH, 
								HSFSDM, HSFSMC, ZY, JY, DJRQ, 
								DJJGDM, DJJGMC, ' ', LineNumDishui, FileName,'1');
			RETURN FALSE;
		END IF;
		
		-- 纳税人识别号不能为空
		IF   (NSRSBH IS NULL OR NSRSBH = '') AND IsCheckNSRSBH = TRUE
		THEN
			Set FormatErrorDishui = FormatErrorDishui + 1;
			CALL InsertErrData('纳税人识别号为空', ZZJGDM, QYMC, QYZCH, NSRSBH, 
								HSFSDM, HSFSMC, ZY, JY, DJRQ, 
								DJJGDM, DJJGMC, ' ', LineNumDishui, FileName,'1');
			RETURN FALSE;
		END IF;		
		
		-- 日期校验
		IF IsDate(DJRQ) = FALSE AND IsCheckDate = TRUE
		THEN
			Set FormatErrorDishui = FormatErrorDishui + 1;
			CALL InsertErrData('登记日期格式不正确', ZZJGDM, QYMC, QYZCH, NSRSBH, 
								HSFSDM, HSFSMC, ZY, JY, DJRQ, 
								DJJGDM, DJJGMC, ' ', LineNumDishui, FileName,'1');
			RETURN FALSE;
		END IF;
	
		--去重处理
		DECLARE md5CodeSql CHARACTER;
		DECLARE md5CodeData ROW;
		DECLARE md5CodeCount INTEGER;
		SET ZZJGDM = ZZJGDM; --  || '_' || CAST(CURRENT_TIMESTAMP AS CHARACTER);
--		IF ZZJGDM IS NULL OR ZZJGDM = '' THEN
--			SET ZZJGDM = 'NULL';
--		END IF;
		SET md5CodeSql  = 'select count(1) c_num from t_dataprocess  where md5code = md5(
						decode(?, '' '', '''', md5(?)) || decode(?, '' '', '''', md5(?)) ||
						decode(?, '' '', '''', md5(?)) || decode(?, '' '', '''', md5(?)) ||
						decode(?, '' '', '''', md5(?)) || decode(?, '' '', '''', md5(?)) ||
						decode(?, '' '', '''', md5(?)) || decode(?, '' '', '''', md5(?)) ||
						decode(?, '' '', '''', md5(?)) || decode(?, '' '', '''', md5(?)) ||
						decode(?, '' '', '''', md5(?)))';
		SET md5CodeData.row[] = passthru(md5CodeSql to Database.orcl 
										values(
								ZZJGDM, ZZJGDM, QYMC, QYMC,
								QYZCH, QYZCH, NSRSBH, NSRSBH,
								HSFSDM, HSFSDM, HSFSMC, HSFSMC, 
								ZY, ZY, JY, JY,
								DJRQ, DJRQ, DJJGDM, DJJGDM, 
								DJJGMC, DJJGMC
								));  
		SET md5CodeCount = md5CodeData.row[1].C_NUM;
		
		-- 入库
		DECLARE str_Sql CHARACTER;
		DECLARE str_Sql_Process CHARACTER;
		DECLARE guid_sql CHARACTER NULL;
		DECLARE guid_row ROW;
		DECLARE guid_data CHARACTER;
		SET guid_sql = 'select cast(sys_guid() as varchar2(40)) as guid from dual';
		SET guid_row.row[] = passthru(guid_sql to Database.orcl);
		SET guid_data = guid_row.row[1].GUID;
	--	SET guid_data = CAST(guid_row.row[1].GUID AS BLOB);
		SET str_Sql_Process = 'INSERT INTO t_dataprocess(messageid,recid,sourcename,
								linenum,createtime,md5code)
								values(?,?,?,?,sysdate,md5(
									decode(?, '' '', '''', md5(?)) || decode(?, '' '', '''', md5(?)) ||
									decode(?, '' '', '''', md5(?)) || decode(?, '' '', '''', md5(?)) ||
									decode(?, '' '', '''', md5(?)) || decode(?, '' '', '''', md5(?)) ||
									decode(?, '' '', '''', md5(?)) || decode(?, '' '', '''', md5(?)) ||
									decode(?, '' '', '''', md5(?)) || decode(?, '' '', '''', md5(?)) ||
									decode(?, '' '', '''', md5(?)))
								)';
		
		SET str_Sql = 'INSERT INTO t_dishui_djxx (
						recid,
						ZZJGDM,QYMC,QYZCH,NSRSBH,HSFSDM,
						HSFSMC,ZY,JY,DJRQ,DJJGDM, 
						DJJGMC) 
					 values (
					 	?,
						decode(?, '' '', null, ?), decode(?, '' '', null, ?),
						decode(?, '' '', null, ?), decode(?, '' '', null, ?),
						decode(?, '' '', null, ?), decode(?, '' '', null, ?),
						decode(?, '' '', null, ?), decode(?, '' '', null, ?),
						decode(?, '' '', null, ?), decode(?, '' '', null, ?),
						decode(?, '' '', null, ?)
					 )';			
		IF 	md5CodeCount = 0 THEN	
			SET CorrectNumDishui = CorrectNumDishui + 1;
			PASSTHRU str_Sql_Process to Database.orcl values (	
								TxtMessageID, guid_data, FileName, CAST(LineNumDishui AS CHARACTER), 
								ZZJGDM, ZZJGDM, QYMC, QYMC,
								QYZCH, QYZCH, NSRSBH, NSRSBH,
								HSFSDM, HSFSDM, HSFSMC, HSFSMC, 
								ZY, ZY, JY, JY,
								DJRQ, DJRQ, DJJGDM, DJJGDM, 
								DJJGMC, DJJGMC
							 );
			PASSTHRU str_Sql to Database.orcl values (guid_data, 
								ZZJGDM, ZZJGDM, QYMC, QYMC,
								QYZCH, QYZCH, NSRSBH, NSRSBH,
								HSFSDM, HSFSDM, HSFSMC, HSFSMC, 
								ZY, ZY, JY, JY,
								DJRQ, DJRQ, DJJGDM, DJJGDM, 
								DJJGMC, DJJGMC
							 );
		ELSE 
			CALL InsertErrData('相同数据已存在', ZZJGDM, QYMC, QYZCH, NSRSBH, 
								HSFSDM, HSFSMC, ZY, JY, DJRQ, 
								DJJGDM, DJJGMC, ' ', LineNumDishui, FileName,'0');
			SET ExistsNumDishui = ExistsNumDishui + 1;
		END IF;		 	
		RETURN FALSE;
	END;
END MODULE;


CREATE COMPUTE MODULE WriteTxtToDBDishui_ZXXXLine
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE WriteTxtToDBDishui_DJXXEOF
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rowData ROW;
		DECLARE strSqlXML CHARACTER;
		DECLARE dataNum INTEGER;
		DECLARE i INTEGER 1;
	
		-- 取得增量数据
		
SET strSqlXML = 'select  a.* from t_dishui_djxx a ,t_dataprocess b, t_filepreview c
				where a.recid= b.recid 
				and b.messageid = c.messageid 
				and c.uploadname = ? 
				and b.fileid is null ';
		IF dataNum = 0  then 
			throw user exception message 2951 values('从' || TableName || '表中没有查询出对应的详细信息！');-- 这种情况基本上不会发生
		END IF;
		SET rowData.row[] = passthru(strSqlXML to Database.orcl values(FileName));
		SET dataNum = CARDINALITY(rowData.row[]);
		
		IF dataNum <> 0 THEN
			FOR source1 AS rowData.row[]  DO
			--	SET OutputRoot.XMLNSC.root.rowset.row[i].(XMLNSC.Attribute)num = i;
				SET OutputRoot.XMLNSC.root.rowset.row[i].RECID = source1.RECID;
				SET OutputRoot.XMLNSC.root.rowset.row[i].BATCHNUM = source1.BATCHNUM;
				SET OutputRoot.XMLNSC.root.rowset.row[i].FILECODE = source1.FILECODE;
				SET OutputRoot.XMLNSC.root.rowset.row[i].SOURCENAME = source1.SOURCENAME;
				SET OutputRoot.XMLNSC.root.rowset.row[i].LINENUM = source1.LINENUM ;
				SET OutputRoot.XMLNSC.root.rowset.row[i].CREATETIME = source1.CREATETIME ;
				SET OutputRoot.XMLNSC.root.rowset.row[i].MD5CODE = source1.MD5CODE;
				SET OutputRoot.XMLNSC.root.rowset.row[i].ZZJGDM = source1.ZZJGDM;
				SET OutputRoot.XMLNSC.root.rowset.row[i].QYMC = source1.QYMC;
				SET OutputRoot.XMLNSC.root.rowset.row[i].QYZCH = source1.QYZCH;
				SET OutputRoot.XMLNSC.root.rowset.row[i].NSRSBH = source1.NSRSBH;
				SET OutputRoot.XMLNSC.root.rowset.row[i].HSFSDM = source1.HSFSDM;
				SET OutputRoot.XMLNSC.root.rowset.row[i].HSFSMC = source1.HSFSMC;
				SET OutputRoot.XMLNSC.root.rowset.row[i].ZY = source1.ZY;
				SET OutputRoot.XMLNSC.root.rowset.row[i].JY = source1.JY;
				SET OutputRoot.XMLNSC.root.rowset.row[i].DJRQ = source1.DJRQ;
				SET OutputRoot.XMLNSC.root.rowset.row[i].DJJGDM = source1.DJJGDM;
				SET OutputRoot.XMLNSC.root.rowset.row[i].DJJGMC = source1.DJJGMC;
				SET i = i+1;
			END FOR;
			SET  OutputLocalEnvironment.Destination.File.Name = substring(FileName BEFORE '.') || '$T_DISHUI_DJXX'  || '.xml';			
			--  TO fileOutput
			PROPAGATE TO TERMINAL 'out1';
		END IF;

		-- 更新标志位		
		DECLARE strSql CHARACTER;
		SET strSql = 'update t_dataprocess set fileid = ''' || substring(FileName BEFORE '.')   || '.xml' || ''' where fileid is null';
		passthru strSql to Database.orcl;

		-- 记日志
--		SET strSql = 'insert into t_data_log (
--				FILE_NAME, FILE_PATH, OPT_TIME, INFO_LEVEL, DATA_NUM, INSERT_NUM, 
--				EXISTS_NUM, F_ERROR_NUM, CHANGE_NUM, FLAG, ERROR_MESSAGE)
--				values
--				(?, ?, sysdate, ?, ?, ?, 
--				 ?, ?, ?, ?, ?)';
--	    SET LogResult = LogResult || ' 结束时间：' || CAST(CURRENT_TIMESTAMP AS CHARACTER);
--	    passthru strSql to Database.orcl values 
--	    		(FileName, ' ', 'INFO', LineNumDishui, CorrectNumDishui,
--	    		 ExistsNumDishui, FormatErrorDishui, dataNum, '2', LogResult);
		--记录新日志信息
		SET strSql='insert into T_PROCESSREPORT_FRONT(PROCESSID,BEGINTIME,ENDTIME,MESSAGEID,DATASOURCE,
						TOTALCOUNT,INCREASECOUNT,INCCHKERRCOUNT,FMTCHKERRCOUNT,CREATETIME,USERID,PROCESSSTATUS,INCREASERATE)
				 	 values(?,?,?,?,?,?,?,?,?,sysdate,?,''1'',round(?/?,2))';
		 passthru strSql to Database.orcl values 
	    		(substring(FileName BEFORE '.'), LogResult,CURRENT_TIMESTAMP, TxtMessageID, OrignFileName, DataLineNumDishui, CorrectNumDishui,
	    		 ExistsNumDishui, FormatErrorDishui,userData,CorrectNumDishui,DataLineNumDishui);
		

--		CALL WriteBrief(dataNum);
		CALL InsertLogDataProcess1('TXT文件处理结束',FileID,userData,2,'处理结束','INFO');
		PROPAGATE TO TERMINAL 'out1';
		RETURN FALSE;
	END;
	
	CREATE PROCEDURE  WriteBrief(IN changeNum INTEGER)
	BEGIN
		SET OutputLocalEnvironment.Destination.File.Name = substring(FileName BEFORE '_BRIEF.') || '.xml';
		SET OutputRoot.XMLNSC.BRIEF.FILE_NAME = substring(FileName BEFORE '.') || '.xml';
		SET OutputRoot.XMLNSC.BRIEF.DATA_NUM = LineNumDishui;
		SET OutputRoot.XMLNSC.BRIEF.INSERT_NUM = CorrectNumDishui;
		SET OutputRoot.XMLNSC.BRIEF.EXISTS_NUM = ExistsNumDishui;
		SET OutputRoot.XMLNSC.BRIEF.F_ERROR_NUM = FormatErrorDishui;						
		SET OutputRoot.XMLNSC.BRIEF.CHANGE_NUM = changeNum;						
		SET OutputRoot.XMLNSC.BRIEF.TABLE_NAME = 'T_DIXX_DISHUI';						
	END;

END MODULE;


CREATE COMPUTE MODULE WriteTxtToDBDishui_ZXXXEOF
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE WriteTxtToDBDishui_GetFileInfo
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN	
		SET LineNumCommon = LineNumCommon + 1;		
		--记录日志开始
		IF InputLocalEnvironment.File.Record = 1 THEN 
			CALL ResetSharedValue();
			DECLARE userSql CHARACTER;
			DECLARE userRow ROW;
			SET userSql = 'select userid,fileid, sourcename from t_filepreview where UPLOADNAME=?';
			SET userRow.row[] = passthru(userSql to Database.orcl values(InputLocalEnvironment.File.Name));
			SET userData= userRow.row[1].USERID;
			SET FileID = userRow.row[1].FILEID;
			SET OrignFileName = userRow.row[1].SOURCENAME;
			CALL InsertLogDataProcess1('TXT文件处理开始',FileID,userData,2,'处理开始','INFO');
		END IF;
		DECLARE strSql CHARACTER;

		-- 重置共享变量
		IF InputLocalEnvironment.File.Record = 1 THEN
			
			-- 设置校验参数开关
			DECLARE results ROW;
			DECLARE ruleType CHARACTER;
			SET results.row[] = passthru('select * from t_meta_rule ' to Database.orcl  );

			FOR source1 AS results.row[]  DO
				SET ruleType = source1.RULETYPE; 
				IF ruleType = 'IsCheckZTBS' AND UPPER(source1.ISUSE) = 'Y' THEN
					SET IsCheckZTBS = TRUE;
				ELSEIF ruleType = 'IsCheckNSRSBH' AND UPPER(source1.ISUSE) = 'Y' THEN
					SET IsCheckNSRSBH = TRUE;
				ELSEIF ruleType = 'IsCheckDate' AND UPPER(source1.ISUSE) = 'Y' THEN
					SET IsCheckDate = TRUE;
				END IF;	
			END FOR;	
			
			SET IsCheckZTBS = TRUE;
			SET IsCheckNSRSBH = TRUE;
			SET IsCheckDate = TRUE;
		END IF;
		
		-- 文件名
		IF FileName is NULL THEN
			SET FileName =  InputLocalEnvironment.File.Name ;
		END IF;
		
		-- 记录数统计

		 
		DECLARE str CHARACTER;
		--得到读取得一条记录,第一个字段
		SET str = CAST(InputRoot.BLOB.BLOB as CHARACTER CCSID 1386);
		
		SET str = REPLACE(str, '&', '&amp;');
		SET str = REPLACE(str, '>', '&gt;');
		SET str = REPLACE(str, '<', '&lt;');		
			
		SET Environment.Variables.StrLine = str;
		
		
		-- 查找表名
		IF TableName IS NULL THEN
			DECLARE rowTableInfo ROW;
			SET strSql = 'select b.tablename as tablename,a.messageid as messageid from t_filepreview a , t_meta_table b 
							where a.messageid= b.messageid 
							and a.uploadname = ?';
			SET rowTableInfo.row[] = passthru(strSql to Database.orcl 
				values(InputLocalEnvironment.File.Name ));
			DECLARE tableRowNum INTEGER;
			SET tableRowNum = CARDINALITY(rowTableInfo.row[]);
			if tableRowNum = 0  then 
				throw user exception message 2951 values('系统中没有和文件相关联的数据表！');
			end if;
			SET TableName = rowTableInfo.row[1].TABLENAME;
			SET TxtMessageID = rowTableInfo.row[1].MESSAGEID;
		end if ;
		SET OutputLocalEnvironment.Variables.TabName = TableName;

		-- 查找配置
		IF RowDataColConfig IS NULL THEN
			DECLARE results ROW;
			DECLARE I INTEGER;
			DECLARE J INTEGER;
			SET strSql = 'select b.columnname, a.sourceorderid
						  from t_meta_columnmapping a, t_meta_column b, t_meta_table c
						 where a.messageid = b.messageid
						   and a.columnid = b.columnid
						   and b.messageid = c.messageid
						   and c.tablename = ?';
			SET results.row[] = passthru(strSql to Database.orcl 
				values(TableName));
			FOR source1 AS results.row[]  DO
				EVAL('SET RowDataColConfig.row[1].'|| source1.COLUMNNAME || ' = ' ||
					CAST(source1.SOURCEORDERID AS CHARACTER) || ';');
			END FOR;	
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE WriteTxtToDBDishui_Exception
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();	
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

--日期格式校验的正则表达示
CREATE PROCEDURE IsNum(IN P1 CHARACTER)
 RETURNS BOOLEAN
 LANGUAGE JAVA 
 EXTERNAL NAME "com.ibm.www.Common.IsNum";
 
CREATE PROCEDURE IsDate(IN P1 CHARACTER)
 RETURNS BOOLEAN
 LANGUAGE JAVA 
 EXTERNAL NAME "com.ibm.www.Common.IsDate";
 
 
 
 

CREATE COMPUTE MODULE WriteTxtToDBDishui_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE WriteTxtToDBDishui_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
