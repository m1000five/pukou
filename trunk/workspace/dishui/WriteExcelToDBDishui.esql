  
DECLARE ExcelTableName SHARED CHARACTER ; 
DECLARE ExcelFileName SHARED CHARACTER;
DECLARE ExcelRowDataColConfig SHARED ROW;
DECLARE ExcelExistsNumDishui SHARED INTEGER 0; 
DECLARE ExcelFormatErrorDishui SHARED INTEGER 0;
DECLARE ExcelCorrectNumDishui SHARED INTEGER 0;
DECLARE ExcelLineNumDishui SHARED INTEGER 0;

DECLARE IsCheckZTBSDishui SHARED BOOLEAN;
DECLARE IsCheckNSRSBHDishui SHARED BOOLEAN; 
DECLARE IsCheckDateDishui SHARED BOOLEAN;

DECLARE ExcelLogResult SHARED CHARACTER;

CREATE COMPUTE MODULE WriteExcelToDBDishui_GetFileInfo

	CREATE PROCEDURE ResetSharedValue() BEGIN
		SET ExcelFileName = NULL;
		SET ExcelTableName= NULL;
		SET ExcelRowDataColConfig=NULL;
		SET ExcelExistsNumDishui=0;
		SET ExcelFormatErrorDishui=0;
		SET ExcelCorrectNumDishui=0;
		SET ExcelLineNumDishui=0;
	END;


	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		DECLARE j INTEGER;
		
		SET j = 1111;
		SET j = 222;	
	
		
		SET OutputRoot=InputRoot;
		-- Reset Shared Value
		CALL ResetSharedValue();
		-- 文件名
		IF ExcelFileName is NULL THEN
			SET ExcelFileName = InputLocalEnvironment.File.Name ;

			-- 设置校验参数开关
			SET IsCheckZTBSDishui = TRUE;
			SET IsCheckNSRSBHDishui = TRUE;
			SET IsCheckDateDishui = TRUE;
		END IF;
		-- 查找表名
		
		DECLARE strSql CHARACTER;
		IF ExcelTableName IS NULL THEN
			DECLARE rowTableInfo ROW;

			SET strSql = 'select b.tablename as tablename from t_filepreview a , t_table b
						where a.messageid= b.messageid
						and a.uploadname = ?';

			SET rowTableInfo.row[] = passthru(strSql to Database.orcl
			values(InputLocalEnvironment.File.Name ));

			DECLARE tableRowNum INTEGER;
			SET tableRowNum = CARDINALITY(rowTableInfo.row[]);
			if tableRowNum = 0 then
				throw user exception message 2951 values('系统中没有和文件相关联的数据表！');
			end if;

			SET ExcelTableName = rowTableInfo.row[1].TABLENAME;
		end if ;
		SET OutputLocalEnvironment.Variables.ExcelTabName = ExcelTableName;		
		-- 查找配置
		IF ExcelRowDataColConfig IS NULL THEN
			DECLARE results ROW;
			DECLARE I INTEGER;
			DECLARE J INTEGER;
			SET strSql = 'select b.columnname, a.sourceorderid
						from t_datasource a, t_column b, t_table c
						where a.messageid = b.messageid
						and a.columnid = b.columnid
						and b.messageid = c.messageid
						and c.tablename = ?';
			SET results.row[] = passthru(strSql to Database.orcl
										values(ExcelTableName));
			FOR source1 AS results.row[] DO
				EVAL('SET ExcelRowDataColConfig.row[1].'|| source1.COLUMNNAME || ' = ' ||
				CAST(source1.SOURCEORDERID AS CHARACTER) || ';');
			END FOR;
		END IF;

		RETURN TRUE;
	END;

END MODULE;

CREATE COMPUTE MODULE WriteExcelToDBDishui_DJXXExcel
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();

		SET ExcelLogResult = '开始时间：' || CAST(CURRENT_TIMESTAMP AS CHARACTER) ;

		--循环获得Excel每一行记录，送到下一节点处理
		DECLARE I INTEGER 1;
		DECLARE J INTEGER 1;
		DECLARE cell CHARACTER '';		

		DECLARE rowNum INTEGER;
		SET rowNum = CARDINALITY(InputRoot.XML.workbook.sheet[1].row[]);
		
		SET I = 1;
		
		DECLARE tmpValue CHARACTER;

		WHILE I <= rowNum DO
			SET J=1;
			SET Environment.Variables.rowCol.row[0].value = ' ';
			WHILE (J <= CARDINALITY(InputRoot.XML.workbook.sheet[1].row[I].cell[])) DO
				SET tmpValue = InputRoot.XML.workbook.sheet[1].row[I].cell[J];
				SET Environment.Variables.rowCol.row[J].value = tmpValue;
				SET J=J+1;
			END WHILE;
			SET ExcelLineNumDishui = I;
			PROPAGATE TO TERMINAL 'out';
			SET I=I+1;
		END WHILE;

		RETURN FALSE;
	END;


END MODULE;

CREATE COMPUTE MODULE WriteExcelToDBDishui_ZXXXExcel
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE WriteExcelToDBDishui_DJXXExcelLine
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- 判断列数是否满足
 
		-- 格式校验
		DECLARE ZZJGDM CHARACTER;
		DECLARE QYMC CHARACTER;
		DECLARE QYZCH CHARACTER;
		DECLARE NSRSBH CHARACTER; 
		DECLARE HSFSDM CHARACTER;
		DECLARE HSFSMC CHARACTER;
		DECLARE ZY CHARACTER;
		DECLARE JY CHARACTER;
		DECLARE DJRQ CHARACTER;
		DECLARE DJJGDM CHARACTER;
		DECLARE DJJGMC CHARACTER;

		DECLARE refRowCol REFERENCE TO Environment.Variables.rowCol;

		CALL NotNULL(TRIM(refRowCol.row[cast(ExcelRowDataColConfig.row[1].ZZJGDM as INTEGER)].value), ZZJGDM);			
		CALL NotNULL(TRIM(refRowCol.row[cast(ExcelRowDataColConfig.row[1].QYMC as INTEGER)].value), QYMC);			
		CALL NotNULL(TRIM(refRowCol.row[cast(ExcelRowDataColConfig.row[1].QYZCH as INTEGER)].value), QYZCH);		
		CALL NotNULL(TRIM(refRowCol.row[cast(ExcelRowDataColConfig.row[1].NSRSBH as INTEGER)].value), NSRSBH);
		CALL NotNULL(TRIM(refRowCol.row[cast(ExcelRowDataColConfig.row[1].HSFSDM as INTEGER)].value), HSFSDM);
		CALL NotNULL(TRIM(refRowCol.row[cast(ExcelRowDataColConfig.row[1].HSFSMC as INTEGER)].value), HSFSMC);
		CALL NotNULL(TRIM(refRowCol.row[cast(ExcelRowDataColConfig.row[1].ZY as INTEGER)].value), ZY);
		CALL NotNULL(TRIM(refRowCol.row[cast(ExcelRowDataColConfig.row[1].JY as INTEGER)].value), JY);
		CALL NotNULL(TRIM(refRowCol.row[cast(ExcelRowDataColConfig.row[1].DJRQ as INTEGER)].value), DJRQ);			
		CALL NotNULL(TRIM(refRowCol.row[cast(ExcelRowDataColConfig.row[1].DJJGDM as INTEGER)].value), DJJGDM);			
		CALL NotNULL(TRIM(refRowCol.row[cast(ExcelRowDataColConfig.row[1].DJJGMC as INTEGER)].value), DJJGMC);	
		
		-- 组织机构代码、企业名称、工商注册：至少填一个
		IF ( ZZJGDM IS NULL OR ZZJGDM = '')  AND 
			( QYMC IS NULL OR QYMC = '')  AND 
			( QYZCH IS NULL OR QYZCH = '')  AND IsCheckZTBSDishui = TRUE
		THEN
			Set ExcelFormatErrorDishui = ExcelFormatErrorDishui + 1;
			CALL InsertErrData('组织机构代码、企业名称、工商注册：都为空', ZZJGDM, QYMC, QYZCH, NSRSBH, 
								HSFSDM, HSFSMC, ZY, JY, DJRQ, 
								DJJGDM, DJJGMC, ' ', ExcelLineNumDishui, ExcelFileName);
			RETURN TRUE;
		END IF;
		
		-- 纳税人识别号不能为空
		IF   (NSRSBH IS NULL OR NSRSBH = '') AND IsCheckNSRSBHDishui = TRUE
		THEN
			Set ExcelFormatErrorDishui = ExcelFormatErrorDishui + 1;
			CALL InsertErrData('纳税人识别号为空', ZZJGDM, QYMC, QYZCH, NSRSBH, 
								HSFSDM, HSFSMC, ZY, JY, DJRQ, 
								DJJGDM, DJJGMC, ' ', ExcelLineNumDishui, ExcelFileName);
			RETURN TRUE;
		END IF;		
		
		-- 日期校验
		
		DECLARE result  BOOLEAN;
		SET result = IsDate(DJRQ);
		
		IF IsDate(DJRQ) = false AND IsCheckDateDishui = TRUE
		THEN
			Set ExcelFormatErrorDishui = ExcelFormatErrorDishui + 1;
			CALL InsertErrData('登记日期格式不正确', ZZJGDM, QYMC, QYZCH, NSRSBH, 
								HSFSDM, HSFSMC, ZY, JY, DJRQ, 
								DJJGDM, DJJGMC, ' ', ExcelLineNumDishui, ExcelFileName);
			RETURN TRUE;
		END IF;

		--去重处理
		DECLARE md5CodeSql CHARACTER;
		DECLARE md5CodeData ROW;
		DECLARE md5CodeCount INTEGER;
		SET ZZJGDM = ZZJGDM; --  || '_' || CAST(CURRENT_TIMESTAMP AS CHARACTER);
		IF ZZJGDM IS NULL OR ZZJGDM = '' THEN
			SET ZZJGDM = 'NULL';
		END IF;
		SET md5CodeSql  = 'select count(1) c_num from t_dishui_djxx  where md5code = md5(
						md5(?) || md5(?) || md5(?) || md5(?) || md5(?) || 
						md5(?) || md5(?) || md5(?) || md5(?) || md5(?) || 
						md5(?))';
		SET md5CodeData.row[] = passthru(md5CodeSql to Database.orcl 
										values(
										ZZJGDM, QYMC, QYZCH, NSRSBH, HSFSDM, 
										HSFSMC, ZY, JY, DJRQ, DJJGDM, 
										DJJGMC));  
		DECLARE b INTEGER;
		SET b = md5CodeCount;
		SET md5CodeCount = md5CodeData.row[1].C_NUM;
		SET b = md5CodeCount;
		
		
		-- 入库
		DECLARE strSql CHARACTER;
		SET strSql = 'INSERT INTO t_dishui_djxx (
						recid,batchnum,sourcename,linenum,createtime,md5code,
						ZZJGDM,QYMC,QYZCH,NSRSBH,HSFSDM,
						HSFSMC,ZY,JY,DJRQ,DJJGDM, 
						DJJGMC) 
					 values (
					 	sys_guid(),20090905,''' || ExcelFileName || ''','|| CAST(ExcelLineNumDishui AS CHARACTER) ||',sysdate,
					 	md5(md5(?) || md5(?) || md5(?) || md5(?) || md5(?) || 
						md5(?) || md5(?) || md5(?) || md5(?) || md5(?) || 
						md5(?)),
						?,?,?,?,?,
						?,?,?,?,?,
						?
					 )';		
		IF 	md5CodeCount = 0 THEN	
			SET ExcelCorrectNumDishui = ExcelCorrectNumDishui + 1;
			PASSTHRU strSql to Database.orcl values (	
													ZZJGDM, QYMC, QYZCH, NSRSBH, HSFSDM, 
													HSFSMC, ZY, JY, DJRQ, DJJGDM, 
													DJJGMC, 
													ZZJGDM, QYMC, QYZCH, NSRSBH, HSFSDM, 
													HSFSMC, ZY, JY, DJRQ, DJJGDM, 
													DJJGMC
												 );
		ELSE 
			CALL InsertErrData('相同数据已存在！', ZZJGDM, QYMC, QYZCH, NSRSBH, 
								HSFSDM, HSFSMC, ZY, JY, DJRQ, 
								DJJGDM, DJJGMC, ' ', ExcelLineNumDishui, ExcelFileName);
			SET ExcelExistsNumDishui = ExcelExistsNumDishui + 1;
		END IF;		 	
		RETURN TRUE;
	END;

END MODULE;

CREATE COMPUTE MODULE WriteExcelToDBDishui_ResetFile
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		SET OutputLocalEnvironment.Variables.ExcelTabName = ExcelTableName;		
		SET ExcelTableName = NULL;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE WriteExcelToDBDishui_ZXXXExcelEOF
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE WriteExcelToDBDishui_DJXXExcelEOF
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE rowData ROW;
		DECLARE strSqlXML CHARACTER;
		DECLARE dataNum INTEGER;
		DECLARE i INTEGER 1;	

		-- 取得增量数据
		SET strSqlXML = 'select * from t_dishui_djxx where filecode is null '; 
		IF dataNum = 0 then
			throw user exception message 2951 values('从' || ExcelTableName || '表中没有查询出对应的详细信息！'); -- 这种情况基本上不会发生
		END IF;		
		SET rowData.row[] = passthru(strSqlXML to Database.orcl);		
		SET dataNum = CARDINALITY(rowData.row[]);		

		IF dataNum <> 0 THEN
			FOR source1 AS rowData.row[]  DO
				SET OutputRoot.XMLNSC.root.rowset.row[i].(XMLNSC.Attribute)num = i;
				SET OutputRoot.XMLNSC.root.rowset.row[i].RECID = source1.RECID;
				SET OutputRoot.XMLNSC.root.rowset.row[i].BATCHNUM = source1.BATCHNUM;
				SET OutputRoot.XMLNSC.root.rowset.row[i].FILECODE = source1.FILECODE;
				SET OutputRoot.XMLNSC.root.rowset.row[i].SOURCENAME = source1.SOURCENAME;
				SET OutputRoot.XMLNSC.root.rowset.row[i].LINENUM = source1.LINENUM ;
				SET OutputRoot.XMLNSC.root.rowset.row[i].CREATETIME = source1.CREATETIME ;
				SET OutputRoot.XMLNSC.root.rowset.row[i].MD5CODE = source1.MD5CODE;
				SET OutputRoot.XMLNSC.root.rowset.row[i].ZZJGDM = source1.ZZJGDM;
				SET OutputRoot.XMLNSC.root.rowset.row[i].QYMC = source1.QYMC;
				SET OutputRoot.XMLNSC.root.rowset.row[i].QYZCH = source1.QYZCH;
				SET OutputRoot.XMLNSC.root.rowset.row[i].NSRSBH = source1.NSRSBH;
				SET OutputRoot.XMLNSC.root.rowset.row[i].HSFSDM = source1.HSFSDM;
				SET OutputRoot.XMLNSC.root.rowset.row[i].HSFSMC = source1.HSFSMC;
				SET OutputRoot.XMLNSC.root.rowset.row[i].ZY = source1.ZY;
				SET OutputRoot.XMLNSC.root.rowset.row[i].JY = source1.JY;
				SET OutputRoot.XMLNSC.root.rowset.row[i].DJRQ = source1.DJRQ;
				SET OutputRoot.XMLNSC.root.rowset.row[i].DJJGDM = source1.DJJGDM;
				SET OutputRoot.XMLNSC.root.rowset.row[i].DJJGMC = source1.DJJGMC;
				SET i = i+1;
			END FOR;
			SET OutputLocalEnvironment.Destination.File.Name = substring(ExcelFileName BEFORE '.') || '.xml';
			-- TO fileOutput
			PROPAGATE TO TERMINAL 'out1';
		END IF;		

		-- 更新标志位	
		DECLARE strSql CHARACTER;
		SET strSql = 'update t_dishui_djxx set filecode = ''' || substring(ExcelFileName BEFORE '.') || '.xml' || ''' where filecode is null';
		passthru strSql to Database.orcl;
		
		-- 记日志
		SET strSql = 'insert into t_data_log (
				FILE_NAME, FILE_PATH, OPT_TIME, INFO_LEVEL, DATA_NUM, INSERT_NUM, 
				EXISTS_NUM, F_ERROR_NUM, CHANGE_NUM, FLAG, ERROR_MESSAGE)
				values
				(trim(?), trim(?), sysdate, trim(?), trim(?), trim(?), 
				 trim(?), trim(?), trim(?), trim(?), trim(?))';
	    SET ExcelLogResult = ExcelLogResult || ' 结束时间：' || CAST(CURRENT_TIMESTAMP AS CHARACTER);
	    passthru strSql to Database.orcl values 
	    		(ExcelFileName, ' ', 'INFO', ExcelLineNumDishui, ExcelCorrectNumDishui,
	    		 ExcelExistsNumDishui, ExcelFormatErrorDishui, dataNum, '2', ExcelLogResult);		

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE WriteExcelToDBDishui_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
